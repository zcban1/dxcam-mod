def process(self, rect, width, height, region, rotation_angle):
    pitch = int(rect.Pitch)

    if rotation_angle in (0, 180):
        offset = (region[1] if rotation_angle == 0 else height - region[3]) * pitch
        height = region[3] - region[1]
        size = pitch * height
    else:
        offset = (region[0] if rotation_angle == 270 else width - region[2]) * pitch
        width = region[2] - region[0]
        size = pitch * width

    buffer = (ctypes.c_char * size).from_address(ctypes.addressof(rect.pBits.contents) + offset)  # Pointer arithmetic
    pitch = pitch // 4

    image = np.ndarray((height, pitch, 4), dtype=np.uint8, buffer=buffer)
    image = image[:, :, :3]

    # Evitare ridimensionamenti non necessari
    if rotation_angle in (0, 180):
        if pitch != width:
            image = image[:, :width, :]
    else:
        if pitch != height:
            image = image[:height, :, :]

    # Applicare la rotazione senza creare nuovi array
    if rotation_angle == 90:
        image = np.ascontiguousarray(np.swapaxes(image[:, :, ::-1], 0, 1))
    elif rotation_angle == 180:
        image = image[::-1, ::-1, :]
    elif rotation_angle == 270:
        image = np.ascontiguousarray(np.swapaxes(image[:, ::-1, :], 0, 1))

    # Tagliare i bordi dell'immagine senza creare nuovi array
    if region[3] - region[1] != image.shape[0]:
        image = image[region[1]:region[3], :, :]
    if region[2] - region[0] != image.shape[1]:
        image = image[:, region[0]:region[2], :]

    return image
