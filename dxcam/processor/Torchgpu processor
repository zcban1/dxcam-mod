import torch
from torch.cuda import ByteTensor
from .base import Processor
import ctypes

class TorchGPUProcessor(Processor):
    def __init__(self, color_mode):
        self.cvtcolor = None
        self.color_mode = color_mode

    def process_cvtcolor(self, image):
        # Remove the alpha channel by selecting only the first 3 channels (BGR)
        image = image[:, :, :3]
        return image

    def process(self, rect, width, height, region, rotation_angle):
        pitch = int(rect.Pitch)

        if rotation_angle in (0, 180):
            offset = (region[1] if rotation_angle == 0 else height - region[3]) * pitch
            height = region[3] - region[1]
            size = pitch * height
        else:
            offset = (region[0] if rotation_angle == 270 else width - region[2]) * pitch
            width = region[2] - region[0]
            size = pitch * width

        buffer = (ctypes.c_char * size).from_address(ctypes.addressof(rect.pBits.contents) + offset)  # Pointer arithmetic
        pitch = pitch // 4

        image_tensor = torch.tensor(buffer, dtype=torch.uint8).view(height, pitch, 4)[:, :, :3]

        # Evitare ridimensionamenti non necessari
        if rotation_angle in (0, 180):
            if pitch != width:
                image_tensor = image_tensor[:, :width, :]
        else:
            if pitch != height:
                image_tensor = image_tensor[:height, :, :]

        # Applicare la rotazione
        if rotation_angle == 90:
            image_tensor = torch.rot90(image_tensor, k=3, dims=(0, 1))
        elif rotation_angle == 180:
            image_tensor = torch.rot90(image_tensor, k=2, dims=(0, 1))
        elif rotation_angle == 270:
            image_tensor = torch.rot90(image_tensor, k=1, dims=(0, 1))

        # Tagliare i bordi dell'immagine
        if region[3] - region[1] != image_tensor.shape[0]:
            image_tensor = image_tensor[region[1]:region[3], :, :]
        if region[2] - region[0] != image_tensor.shape[1]:
            image_tensor = image_tensor[:, region[0]:region[2], :]

        return image_tensor
