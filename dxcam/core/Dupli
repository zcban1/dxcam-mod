import ctypes
from dataclasses import dataclass, InitVar
from dxcam._libs.d3d11 import *
from dxcam._libs.dxgi import *
from dxcam.core.device import Device
from dxcam.core.output import Output


@dataclass
class Duplicator:
    """
    Classe per catturare frame dal desktop utilizzando l'API di duplicazione desktop (DDA).

    Args:
        output: Oggetto `Output` che rappresenta il dispositivo di output (ad esempio, il monitor).
        device: Oggetto `Device` che rappresenta la scheda grafica.
    """

    texture: ctypes.POINTER(ID3D11Texture2D) = ctypes.POINTER(ID3D11Texture2D)()
    duplicator: ctypes.POINTER(IDXGIOutputDuplication) = None
    updated: bool = False

    def __post_init__(self, output: Output, device: Device) -> None:
        """
        Imposta l'oggetto di duplicazione e acquisisce il primo frame.

        Args:
            output: Oggetto `Output` che rappresenta il dispositivo di output (ad esempio, il monitor).
            device: Oggetto `Device` che rappresenta la scheda grafica.
        """

        self.duplicator = ctypes.POINTER(IDXGIOutputDuplication)()
        output.output.DuplicateOutput(device.device, ctypes.byref(self.duplicator))
        self._acquire_frame()

    def _acquire_frame(self) -> None:
        """
        Acquisisce un nuovo frame dal desktop.
        """

        info = DXGI_OUTDUPL_FRAME_INFO()
        res = ctypes.POINTER(IDXGIResource)()
        self.duplicator.AcquireNextFrame(
            0, ctypes.byref(info), ctypes.byref(res)
        )
        if res is not None:
            self.texture = res.QueryInterface(ID3D11Texture2D)
            self.updated = True

    def update_frame(self) -> bool:
        """
        Acquisisce un nuovo frame dal desktop.

        Returns:
            `True` se è stato acquisito un nuovo frame, `False` se c'è stato un errore.
        """

        self._acquire_frame()
        return self.updated

    def release_frame(self) -> None:
        """
        Rilascia il frame corrente.
        """

        if self.texture is not None:
            self.duplicator.ReleaseFrame()
            self.texture = None
            self.updated = False

    def release(self) -> None:
        """
        Rilascia l'oggetto di duplicazione e qualsiasi risorsa che è stata acquisita.
        """

        if self.duplicator is not None:
            self.duplicator.Release()
            self.duplicator = None

    def __repr__(self) -> str:
        """
        Restituisce una rappresentazione stringa dell'oggetto.

        Returns:
            Stringa che include il nome della classe e il valore del membro `duplicator`.
        """

        return "<{} Initalized:{}>".format(
            self.__class__.__name__, self.duplicator is not None
        )
